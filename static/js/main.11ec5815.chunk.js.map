{"version":3,"sources":["components/Textarea/Textarea.styles.ts","components/Textarea/Textarea.tsx","components/ErrorMessage/ErrorMessage.styles.ts","components/ErrorMessage/ErrorMessage.tsx","components/ErrorList/ErrorList.styles.ts","components/ErrorList/ErrorList.tsx","hooks/useEnhancedState.ts","containers/Main/Selector.ts","containers/Main/Main.styles.ts","containers/Main/Main.tsx","shared/api.ts","index.tsx"],"names":["Container","styled","div","Label","label","Textarea","textarea","props","value","readOnly","onChange","placeholder","Text","p","ErrorMessage","message","Header","Heading","h3","ErrorList","errors","length","map","error","key","useEnhancedState","state","React","useState","_state","_setState","useCallback","updatedValues","prevState","Selector","args","name","method","argument","exchange","getValues","setValue","Object","keys","forEach","this","Section","section","FlexContainer","h1","SubHeading","h2","Main","inputValue","outputValue","selectors","setState","onAddNewSelectors","newSelectors","a","Promise","all","selector","symbol","axios","get","params","q","modifier","limit","coinResponse","coin","data","currencies","coinId","id","exchangeResponse","open","newSelectorsWithAPIData","onUpdateSelectors","regex2","inputSelectors","match","inputSelectorText","selectorValueArr","splittedSelectorValue","split","filter","s1","undefined","find","s2","onUpdateErrors","existInInputText","includes","existInSate","onUpdateOutput","regex","RegExp","isName","toLowerCase","isExchange","replace","toFixed","useEffect","timeoutId","setTimeout","clearTimeout","spellCheck","e","target","preventDefault","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11ec5815.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 48%;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  color: #000000;\n  font-weight: bold;\n  margin-bottom: 16px;\n`;\n\nexport const Textarea = styled.textarea`\n  width: 100%;\n  resize: none;\n  height: 256px;\n  font-size: 16px;\n  padding: 16px 24px;\n  border-radius: 6px;\n  border-color: #d9d9d9;\n\n  &:read-only {\n    cursor: not-allowed;\n\n    &:focus,\n    &:active {\n      outline: none;\n      border-color: #d9d9d9;\n    }\n  }\n\n  &:focus,\n  &:active {\n    outline: none;\n    border-color: #2f54eb;\n  }\n`;\n","import React from 'react';\n\nimport * as Types from './Textarea.types';\nimport * as Styles from './Textarea.styles';\n\nconst Textarea: React.FunctionComponent<Types.TextareaProps> = (props) => {\n  return (\n    <Styles.Container>\n      <Styles.Label>{props.label}</Styles.Label>\n      <Styles.Textarea\n        value={props.value}\n        readOnly={props.readOnly}\n        onChange={props.onChange}\n        placeholder={props.placeholder}\n      />\n    </Styles.Container>\n  );\n};\n\nexport default Textarea;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  border-bottom: 1px solid #d9d9d9;\n`;\n\nexport const Text = styled.p`\n  margin: 16px 24px 16px 24px;\n`;\n","import React from 'react';\n\nimport * as Types from './ErrorMessage.types';\nimport * as Styles from './ErrorMessage.styles';\n\nconst ErrorMessage: React.FunctionComponent<Types.ErrorMessageProps> = (props) => {\n  return (\n    <Styles.Container>\n      <Styles.Text>{props.message}</Styles.Text>\n    </Styles.Container>\n  );\n};\n\nexport default ErrorMessage;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 32px;\n`;\n\nexport const Header = styled.div`\n  padding: 16px 24px;\n  background: #fafafa;\n  border-top: 1px solid #d9d9d9;\n  border-bottom: 1px solid #d9d9d9;\n`;\n\nexport const Heading = styled.h3`\n  margin: 0;\n`;\n","import React from 'react';\n\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\nimport * as Types from './ErrorList.types';\nimport * as Styles from './ErrorList.styles';\n\nconst ErrorList: React.FunctionComponent<Types.ErrorListProps> = (props) => {\n  return (\n    <Styles.Container>\n      <Styles.Header>\n        <Styles.Heading>Error messages</Styles.Heading>\n      </Styles.Header>\n      {props.errors.length === 0 && <ErrorMessage message=\"Keep going, you haven't made any mistakes yet!\" />}\n\n      {props.errors.map((error) => (\n        <ErrorMessage key={error} message={error} />\n      ))}\n    </Styles.Container>\n  );\n};\n\nexport default ErrorList;\n","import React from 'react';\n\nfunction useEnhancedState<T>(state: T): [T, (updatedValues: Partial<T>) => void] {\n  const [_state, _setState] = React.useState<T>(state);\n\n  const setState = React.useCallback((updatedValues: Partial<T>) => {\n    _setState((prevState) => ({ ...prevState, ...updatedValues }));\n  }, []);\n\n  return [_state, setState];\n}\n\nexport default useEnhancedState;\n","import * as SharedTypes from '../../shared/types';\n\nclass Selector {\n  public readonly name: string | null;\n  public readonly value: string | null;\n  public readonly error: string | null;\n  public readonly method: string | null;\n  public readonly argument: string | null;\n  public readonly exchange: number | null;\n\n  [key: string]: any;\n\n  constructor(args?: Partial<SharedTypes.SelectorValues>) {\n    this.name = args?.name || null;\n    this.value = args?.value || null;\n    this.error = args?.error || null;\n    this.method = args?.method || null;\n    this.argument = args?.argument || null;\n    this.exchange = args?.exchange || null;\n  }\n\n  public getValues = (): SharedTypes.SelectorValues => ({\n    name: this.name,\n    value: this.value,\n    error: this.error,\n    method: this.method,\n    argument: this.argument,\n    exchange: this.exchange,\n  });\n\n  public setValue = (args: Partial<SharedTypes.SelectorValues> & { [key: string]: string | number | null }) => {\n    Object.keys(args).forEach((key) => {\n      this[key] = args[key];\n    });\n  };\n}\n\nexport default Selector;\n","import styled from 'styled-components';\n\nexport const Section = styled.section``;\n\nexport const FlexContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Heading = styled.h1`\n  font-size: 32px;\n  text-align: center;\n  margin: 32px 0;\n`;\n\nexport const SubHeading = styled.h2`\n  color: #8c8c8c;\n  font-size: 26px;\n  text-align: center;\n  margin: 0 0 64px 0;\n`;\n","import React from 'react';\n\nimport Textarea from '../../components/Textarea';\nimport ErrorList from '../../components/ErrorList';\n\nimport useEnhancedState from '../../hooks/useEnhancedState';\n\nimport * as Api from '../../shared/api';\n\nimport Selector from './Selector';\n\nimport * as Types from './Main.types';\nimport * as Styles from './Main.styles';\n\nconst Main: React.FunctionComponent = () => {\n  const [state, setState] = useEnhancedState<Types.State>({\n    inputValue: '',\n    outputValue: '',\n    selectors: [],\n    errors: [],\n  });\n\n  const onChangeInputValue = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setState({ inputValue: e.target.value });\n  };\n\n  const onAddNewSelectors = React.useCallback(\n    async (newSelectors: Selector[]) => {\n      const newSelectorsWithAPIData = await Promise.all(\n        newSelectors.map(async (selector) => {\n          try {\n            if (selector.argument) {\n              const coinResponse = await Api.getCoinBySymbol(selector.argument);\n\n              const coin = coinResponse.data.currencies[0];\n\n              if (coin) {\n                const exchangeResponse = await Api.getExchangeByCoinId(coin.id);\n\n                const exchange = exchangeResponse.data[0];\n\n                selector.setValue({ name: coin.name, exchange: exchange.open || null });\n              }\n\n              if (!coin) {\n                selector.setValue({ error: `Coin doesn't exist for selector ${selector.value}` });\n              }\n\n              return selector;\n            }\n\n            selector.setValue({ error: `No argument for selector ${selector.value}` });\n\n            return selector;\n          } catch (error) {\n            selector.setValue({\n              error: `Unable to get data for selector ${selector.value} from Coinpaprika's API. Try again later.`,\n            });\n\n            return selector;\n          }\n        })\n      );\n\n      return setState({ selectors: [...state.selectors, ...newSelectorsWithAPIData] });\n    },\n\n    [state.selectors, setState]\n  );\n\n  const onUpdateSelectors = React.useCallback(() => {\n    // Regex for getting selector from input text.\n    const regex1 = /\\{{([^{}]*)\\}}/g;\n\n    // Regex for removing parenthesis and white spaces from selectors.\n    const regex2 = /(?<=\\s)(.*?)(?=\\s)/g;\n\n    // Get all selectors from input text.\n    const inputSelectors = state.inputValue.match(regex1);\n\n    if (inputSelectors && inputSelectors.length > 0) {\n      const newSelectors: Selector[] = inputSelectors\n        .map((inputSelectorText) => {\n          // Create selector instance.\n          const selector = new Selector();\n\n          // Remove parenthesis and white spaces from selector text.\n          const selectorValueArr = inputSelectorText.match(regex2);\n\n          if (selectorValueArr && selectorValueArr[0]) {\n            const selectorValue = selectorValueArr[0];\n            const splittedSelectorValue = selectorValue.split('/');\n\n            const method = splittedSelectorValue[0];\n            const argument = splittedSelectorValue[1];\n\n            if (method && argument) {\n              selector.setValue({\n                method,\n                argument,\n                value: inputSelectorText,\n              });\n\n              return selector;\n            }\n\n            selector.setValue({ error: `Cannot read method and argument of selector ${inputSelectorText}.` });\n\n            return selector;\n          }\n\n          selector.setValue({ error: `Cannot decode selector ${inputSelectorText}.` });\n\n          return selector;\n        })\n        // Remove selectors that has been already added to state to avoid unnecessary requests.\n        .filter((s1) => state.selectors.find((s2) => s2.value === s1?.value) === undefined);\n\n      onAddNewSelectors(newSelectors);\n    }\n\n    return;\n  }, [state.inputValue, state.selectors, onAddNewSelectors]);\n\n  const onUpdateErrors = React.useCallback(() => {\n    state.selectors.forEach((selector) => {\n      if (selector.value) {\n        const existInInputText = state.inputValue.includes(selector.value);\n        const existInSate = state.errors.find((error) => error.id === selector.value) !== undefined;\n\n        if (existInInputText && selector.error && !existInSate) {\n          setState({ errors: [...state.errors, { id: selector.value, message: selector.error }] });\n        }\n\n        // Remove it if selector has been removed from input but exists in error array.\n        if (!existInInputText && existInSate) {\n          setState({ errors: state.errors.filter((error) => error.id !== selector.value) });\n        }\n      }\n    });\n  }, [state.errors, state.inputValue, state.selectors, setState]);\n\n  const onUpdateOutput = React.useCallback(() => {\n    let outputValue = state.inputValue;\n\n    state.selectors.forEach((selector) => {\n      if (selector.value && selector.method) {\n        const regex = new RegExp(selector.value, 'g');\n        const isName = selector.method.toLowerCase() === 'name';\n        const isExchange = selector.method.toLowerCase() === 'rate';\n\n        if (isName) {\n          outputValue = outputValue.replace(regex, selector.name || '');\n        }\n\n        if (isExchange) {\n          outputValue = outputValue.replace(regex, `$${selector.exchange?.toFixed(2)}` || '');\n        }\n      }\n    });\n\n    if (outputValue !== state.outputValue) {\n      setState({ outputValue });\n    }\n  }, [state.inputValue, state.selectors, state.outputValue, setState]);\n\n  React.useEffect(() => {\n    const timeoutId = setTimeout(onUpdateSelectors, 1000);\n\n    return () => clearTimeout(timeoutId);\n  }, [state.inputValue]);\n\n  React.useEffect(() => {\n    onUpdateOutput();\n    onUpdateErrors();\n  }, [state.inputValue, state.selectors, onUpdateSelectors, onUpdateErrors, onUpdateOutput]);\n\n  return (\n    <Styles.Section>\n      <Styles.Heading>Cryptocurrency Exercise</Styles.Heading>\n      <Styles.SubHeading>by Adam Megger</Styles.SubHeading>\n\n      <Styles.FlexContainer>\n        <Textarea\n          id=\"input\"\n          label=\"Input\"\n          value={state.inputValue}\n          spellCheck=\"false\"\n          onChange={onChangeInputValue}\n          placeholder=\"Start typing...\"\n        />\n\n        <Textarea\n          readOnly\n          id=\"input\"\n          label=\"Output\"\n          value={state.outputValue}\n          onChange={(e) => e.preventDefault()}\n          placeholder=\"...so you will see your output here.\"\n        />\n      </Styles.FlexContainer>\n\n      {state.inputValue.length > 0 && <ErrorList errors={state.errors.map((error) => error.message)} />}\n    </Styles.Section>\n  );\n};\n\nexport default Main;\n","import axios, { AxiosResponse, AxiosPromise } from 'axios';\n\nimport * as Types from './types';\n\nexport const getCoinBySymbol = (symbol: string): Promise<AxiosResponse<{ currencies: Types.Coin[] }>> => {\n  return axios.get('https://api.coinpaprika.com/v1/search', {\n    params: {\n      q: symbol,\n      modifier: 'symbol_search',\n      limit: 1,\n    },\n  });\n};\n\nexport const getExchangeByCoinId = (coinId: string): Promise<AxiosPromise<Types.OHLC[]>> => {\n  return axios.get(`https://api.coinpaprika.com/v1/coins/${coinId}/ohlcv/latest`);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport Main from './containers/Main';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    color: #1f1f1f;\n    box-sizing: border-box;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n    'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n    'Noto Color Emoji';\n    line-height: 24px;\n  }\n\n  body {\n    margin: 0;\n    padding: 32px;\n    font-size: 16px;\n    -webkit-font-smoothing: antialiased;\n    font-variant-numeric: tabular-nums;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}